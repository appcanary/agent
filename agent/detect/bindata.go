// Code generated by go-bindata.
// sources:
// agent/resources/detect_linux.sh
// DO NOT EDIT!

package detect

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _agentResourcesDetect_linuxSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x4f\xdb\x30\x10\x7e\xcf\x5f\x71\x2b\x15\x69\x25\x42\x28\x6c\xf0\x30\xf1\xc0\x44\x27\x55\x9a\x36\x09\xd0\x5e\x10\xaa\x5c\xe7\x42\x3c\x52\xbb\xb3\xdd\x06\xd6\xf5\x7f\xdf\xe5\x47\x9b\x1f\x84\x95\x8e\xbd\x25\xbe\xcf\xdf\x7d\xfe\xee\xce\xf2\xde\x3b\x7f\x6e\xb4\x3f\x11\xd2\x47\xb9\x80\x09\x33\x91\x63\xd0\x82\xf7\x88\x0a\x66\x62\x86\x21\x13\xb1\xe3\xcc\xe5\x83\x54\x89\x1c\x2b\xd3\xeb\xc3\xd2\x01\x40\x1e\x29\xf0\x24\x14\x01\x67\xe5\x38\x33\x2d\xa4\x1d\x2f\x50\x1b\xa1\x64\x01\x8b\x15\x67\x31\x04\xc2\x58\xad\xce\xbb\xcb\xc1\x0a\x34\xc6\xc8\x0c\xd2\xcf\xf1\xaa\xc2\xd3\x5d\xe6\xa0\x95\xdf\x5d\x16\x90\x2c\xfc\x28\x2c\x1c\xa5\xec\x01\x5a\xe4\x76\x1c\x0b\x39\x7f\xcc\xc8\x29\xba\x07\x37\x11\x1a\x04\x9b\x28\xe0\x4a\x5a\x26\x24\xa4\xa7\x58\x30\x2d\xd8\x24\x46\x73\x00\x93\xb9\x05\x1b\xe1\x13\x4c\xd9\x13\x48\x65\x21\x62\x0b\x4c\x57\x40\x49\x34\x90\x20\x48\xc4\xe0\x00\x8c\xca\xf8\xe8\x3f\x56\x2c\x48\x01\x53\x20\xb6\x50\x68\x63\x81\xc9\x6c\x45\x02\x8f\x90\x3f\x80\x08\x53\xdc\xbd\xca\x98\xcb\x64\xe9\x62\xc2\xa4\xc5\x80\xa8\x08\x73\x7b\x0b\x1e\x82\x8f\x96\xfb\xca\x78\xc5\xa1\xe0\xee\xee\x63\xc6\x45\x18\xa0\xac\x73\xcd\x9f\x61\x28\x14\x8a\x67\x1c\xb1\x99\x6c\x27\xa9\x80\x72\x96\x0d\x4d\x8f\x4c\xee\x74\x97\xa3\xcb\x55\xa7\x0f\xfb\xfb\xeb\xff\xef\xc3\xab\xeb\xd1\xb7\xaf\xe3\x6c\xbd\x46\xbb\x29\x1a\x85\xb2\x85\xb2\x72\x95\x4d\x4e\x16\xaa\x95\xbe\xac\x25\x54\x6a\x99\x16\x33\xae\x49\xb9\x1c\x5d\xdf\x5c\x8d\x3e\x8d\x9b\x92\xd6\xeb\x57\xc3\x2f\xc3\x8b\xeb\xe1\x8b\xba\x2a\xfb\x1b\xfa\x9a\x0c\x3b\x8b\x4c\x22\xc1\x23\x20\x33\xc7\x45\xa8\x25\x7f\xaf\x12\x06\x4f\xc0\x6f\xe0\xd4\x6b\x5e\x78\xdc\xaf\xab\xa9\xe3\x74\x15\xf7\x6a\x59\x15\xf3\xd6\xed\x10\xe0\x44\x30\xb9\xd9\x57\xb3\x68\x8f\x7a\x62\x8a\x70\x99\x41\x4c\xde\xf2\x3f\xd0\x18\x81\xbe\x11\x41\xda\xd7\x04\x15\xba\x8d\xa8\xd8\x4f\x06\xc4\x34\x22\x04\xd3\xc5\x7e\xf7\xf4\xf0\xe8\xf0\xcc\xad\x5b\xc0\x99\xcd\x49\x84\x31\x73\xa4\xa3\x45\x48\xc3\xe3\x0d\xe8\x8b\x25\x0f\xe0\x2e\xf3\xd3\x81\x55\xb1\x4a\x50\xf7\xba\x83\x3e\xac\xdc\xe2\xe0\x74\x9e\x7b\x8d\x33\xf0\x7e\x82\xeb\xbb\x6d\x62\x2a\x47\xaa\x1a\x9a\xf9\xe7\x05\xe4\xc8\x54\x58\xd4\xe7\xe9\x6e\x2f\x1c\xb4\x31\xe4\xb5\xc0\x38\x1b\x87\x2d\x2c\x87\x5b\x58\xf2\x69\xda\xb5\xd9\x37\x57\x80\x66\x3c\xc6\xf6\x09\x6e\x88\x0a\x3f\xd4\x85\x81\xdb\x4a\x91\x7b\xec\x7d\x86\x54\xf9\xc6\xea\xee\x20\x73\xb8\x52\x26\x57\xc5\xee\x5b\x94\x87\x18\x50\xe6\xd7\x29\x3f\x69\x57\x5e\xa7\xa8\xab\xcb\x63\x6f\x52\xa8\x31\x88\x98\x6d\x57\x98\x33\x8c\x23\xe2\xad\x36\x6c\x63\xcb\xb6\x86\x2d\xfa\x95\x72\x76\xd6\xa2\x32\xca\x55\x07\xce\xa1\xc3\x51\x5a\x65\x3a\xf5\xc4\x35\x73\x5e\x48\xdb\xc8\xda\x3d\xa1\x64\xdb\xeb\x5a\x7a\x97\x27\x76\x8b\x26\x7f\x59\xa0\xe1\x82\x90\x22\x14\xfc\x3f\x88\x7c\xbf\xa3\xc8\x32\xb9\xfb\x97\x69\xdc\xb5\x30\x67\xfd\x5c\x46\xde\x77\x83\xe6\x28\x37\x45\xe4\xb4\xa4\x03\x35\x11\x19\x7a\x35\x68\xea\x32\xf7\x5f\x07\x7b\x7d\x71\x5d\x4c\xd9\x2f\xc2\x96\x77\x60\xcb\x6c\xb8\xa7\xb5\x5b\xd3\x65\x49\x51\xb1\x57\xe4\x2b\x5e\x02\xe5\xf3\xab\xf9\x14\x72\xfe\x04\x00\x00\xff\xff\x91\x57\x92\xb5\xc1\x09\x00\x00")

func agentResourcesDetect_linuxShBytes() ([]byte, error) {
	return bindataRead(
		_agentResourcesDetect_linuxSh,
		"agent/resources/detect_linux.sh",
	)
}

func agentResourcesDetect_linuxSh() (*asset, error) {
	bytes, err := agentResourcesDetect_linuxShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "agent/resources/detect_linux.sh", size: 2497, mode: os.FileMode(420), modTime: time.Unix(1480694563, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"agent/resources/detect_linux.sh": agentResourcesDetect_linuxSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"agent": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"detect_linux.sh": &bintree{agentResourcesDetect_linuxSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

