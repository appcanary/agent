// Code generated by go-bindata.
// sources:
// agent/resources/detect_linux.sh
// DO NOT EDIT!

package detect

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _agentResourcesDetect_linuxSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x5f\x4f\xdb\x3c\x14\xc6\xef\xf3\x29\xce\x5b\x2a\x99\x5e\x84\x50\x78\x07\x17\x13\x17\x4c\x74\x52\xa5\x69\x93\x60\xda\x0d\x42\x91\xeb\x9c\x2c\x1e\xc6\xee\x6c\x97\xa2\x75\xf9\xee\x73\x13\x97\xc4\x21\x50\x58\x77\x07\x3d\x8f\x9f\xf3\x3b\x7f\xec\x76\xef\xbf\x64\x61\x74\x32\xe3\x32\x41\x79\x0f\x33\x6a\x8a\xc8\xa0\x85\xf8\x01\x15\xcc\xf9\x1c\x73\xca\x45\x14\x2d\xe4\xad\x54\x4b\x99\x2a\xb3\x3f\x82\x55\x04\x80\xac\x50\x10\x4b\xf0\x81\xa8\x8c\xa2\xb9\xe6\xd2\xa6\xf7\xa8\x0d\x57\xd2\xcb\x84\x62\x54\x40\xc6\x8d\xd5\xea\x6c\xb8\x1a\x97\xa0\x51\x20\x35\xe8\xfe\x39\x2a\x5b\x3e\xc3\x55\x2d\x2a\x93\xe1\xca\x4b\xaa\xf0\x03\xb7\x70\xb8\x76\xcf\xd0\x22\xb3\xa9\xe0\x72\xf1\x50\x99\xbb\x28\xcf\xe1\xfa\x1a\x62\x84\x04\x2d\x4b\x94\x89\xfd\x49\xb8\xb9\x79\x0f\xb6\x40\xe9\x34\x00\x46\x2d\x34\x7b\xa2\xa9\x42\x8f\x60\xd3\x8b\xb2\xfa\xa0\xa1\xfb\x36\xb9\xbc\x9a\x7e\xf9\x9c\xae\x23\x55\x28\x28\xaf\xe1\x85\x16\xef\x1a\x58\x84\x50\xc2\xcc\xb6\x53\xb5\x44\x21\xd6\xc5\xf4\xea\xeb\xe5\xf4\x43\xfa\x14\x6f\x13\xb9\x9c\x7c\x9a\x9c\x5f\x4d\xde\xce\xb8\x2c\x38\x2b\xc0\x65\x4e\x7d\xa8\xc5\xb6\xc9\xbf\xdf\x0a\x43\xcc\xe1\x37\xb0\x85\x5b\x8d\xfc\x68\x14\xd2\x84\x3a\xdd\xd6\xed\xd0\xba\x0c\x67\x9c\xca\xc7\x63\x41\xf7\xf6\x5c\xff\xee\x10\x2e\x2a\x89\x81\x82\xde\x23\xfc\x40\x63\x38\x26\x86\x67\xc0\xe5\x5a\xca\x75\x9f\x91\x3f\xef\xea\x17\x08\xca\xc9\xb4\x3f\x4f\x4e\x0e\x0e\x0f\x4e\x49\xd8\x01\x46\x6d\x6d\xc2\x8d\x59\xa0\xab\xac\x40\x9a\x41\x3c\x76\x7f\xd1\xe5\x2d\x90\x55\x5d\x1c\x58\x25\xd4\x12\xf5\xfe\x70\x3c\x82\x92\xf8\xba\x5d\x3d\xdf\x35\xce\x21\xfe\x09\x24\x21\x7d\x30\xad\x92\xda\xfd\xac\xda\x17\x67\xae\x23\x77\xdc\xa2\x3e\x5b\x9f\x8e\xf3\x71\x9f\x43\x3d\x0a\x14\x7e\x75\x5e\x74\x39\xd8\xe2\x92\xf3\x5d\xe6\xa5\x34\x65\x02\xfb\xb7\xbd\x03\x95\xbf\x0b\xc1\x80\xf4\x5a\xd4\x3d\x8e\x3f\xc2\x9a\xfc\xb1\xd5\xc3\x71\xd5\xe1\xd6\x98\x88\x12\x64\x17\xf2\x1c\x33\x97\xf9\x75\xe4\xc7\xfd\xe4\xa1\x45\x48\x57\xc7\x76\x22\xd4\x98\x15\xd4\xf6\x13\xd6\x0e\x69\xe1\x7c\xdb\x0b\xdb\x39\xb2\x6d\x61\xfd\xbe\xba\x9c\x83\x0d\x54\x65\x59\x0e\xe0\x0c\x06\x0c\xa5\x55\x66\x10\x26\x0e\x9a\xf3\x4c\xda\x4e\xd6\xe1\xb1\x4b\xb6\x7d\xae\x4d\xef\xea\xc4\xc4\x2f\xf9\xf3\x80\x86\x71\xa7\xe4\x39\x67\xff\x00\xf2\xff\x37\x42\x36\xc9\xc9\x0b\xb7\xf1\xad\x83\x39\x1d\xd5\x18\xf5\xde\x8d\xbb\x57\xb9\x0b\x51\xdb\x3a\x0e\xd4\xce\xc8\xa0\x41\xed\xb6\x8c\xfc\xed\xc5\xde\x3c\x5c\xe7\x77\xf4\x97\xd3\x36\x6f\x60\xcf\xdd\x20\x27\xc1\xab\x49\xe8\xd2\x4f\xec\x15\xf9\x2a\x38\x80\xe6\x07\x46\xf7\xcb\x3e\xfa\x13\x00\x00\xff\xff\x56\xf6\x82\x75\xa3\x08\x00\x00")

func agentResourcesDetect_linuxShBytes() ([]byte, error) {
	return bindataRead(
		_agentResourcesDetect_linuxSh,
		"agent/resources/detect_linux.sh",
	)
}

func agentResourcesDetect_linuxSh() (*asset, error) {
	bytes, err := agentResourcesDetect_linuxShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "agent/resources/detect_linux.sh", size: 2211, mode: os.FileMode(420), modTime: time.Unix(1456349373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"agent/resources/detect_linux.sh": agentResourcesDetect_linuxSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"agent": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"detect_linux.sh": &bintree{agentResourcesDetect_linuxSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

