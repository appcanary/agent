// Code generated by go-bindata.
// sources:
// agent/resources/detect_linux.sh
// DO NOT EDIT!

package detect

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _agentResourcesDetect_linuxSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x5d\x4f\xdb\x3c\x14\xc7\xef\xf3\x29\xce\x53\x2a\x99\x5e\x84\x50\x78\x06\x17\x13\x17\x6c\x65\x52\x2f\x06\x12\x4c\xbb\x41\x28\x72\x9d\x93\xc5\xc3\xd8\x9d\xed\x52\xb4\x2e\xdf\x7d\x6e\xe2\xb6\x71\x08\xaf\xdd\x1d\xf4\xfc\xfd\x3f\xbf\xf3\x62\xb7\x3b\xff\x25\x33\xa3\x93\x09\x97\x09\xca\x7b\x98\x50\x53\x44\x06\x2d\xc4\x0f\xa8\x60\xca\xa7\x98\x53\x2e\xa2\x68\x26\x6f\xa5\x9a\xcb\x54\x99\xdd\x01\x2c\x22\x00\x64\x85\x82\x58\x82\x0f\x44\x65\x14\x4d\x35\x97\x36\xbd\x47\x6d\xb8\x92\x5e\x26\x14\xa3\x02\x32\x6e\xac\x56\x27\xfd\xc5\xb0\x04\x8d\x02\xa9\x41\xf7\xcf\x41\xd9\xf0\xe9\x2f\x6a\x51\x99\xf4\x17\x5e\x52\x85\x1f\xb8\x85\xfd\xa5\x7b\x86\x16\x99\x4d\x05\x97\xb3\x87\xca\xdc\x45\x79\x0e\xd7\xd7\x10\x23\x24\x68\x59\xa2\x4c\xec\x4f\xc2\xcd\xcd\x47\xb0\x05\x4a\xa7\x01\x30\x6a\xa6\xd9\x23\x4d\x15\x5a\x83\x8d\x47\x65\xf5\xc1\x86\xee\xfb\xd9\xe5\xd5\xf8\xe2\x3c\x5d\x46\xaa\x50\x50\xde\x86\x17\x1a\xbc\x4b\x60\xb1\x86\xb2\x68\x6c\x92\x51\x4b\x13\x61\x26\xcf\xa2\x75\x2a\x43\xc0\xd1\xf8\xea\xdb\xe5\xf8\x53\xfa\x18\x74\x15\xf9\x7c\x31\x3a\x3b\x3f\xfd\x7a\xf6\x76\xdc\x79\xc1\x59\x01\x2e\x75\xea\x43\x0d\xc2\x15\xc0\x6e\x23\x0c\x31\x87\x3f\xc0\x66\x6e\x4b\xf2\x83\x41\x88\x13\xea\x74\x53\xf7\xbe\x2e\x56\x63\xcb\x70\xc2\xa9\x5c\x1f\x0b\x7a\xb8\xe3\xba\x78\x87\x30\xaa\x24\x06\x0a\x7a\x8f\xf0\x13\x8d\xe1\x98\x18\x9e\x01\x97\x4b\x29\xd7\x5d\x46\xfe\xbc\xab\x5f\x20\x28\x27\xd3\xfe\x3c\x39\xda\xdb\xdf\x3b\x26\x61\x07\x18\xb5\xb5\x09\x37\x66\x86\xae\xb2\x02\x69\x06\xf1\xd0\xfd\x45\xe7\xb7\x40\x16\x75\x71\x60\x95\x50\x73\xd4\xbb\xfd\xe1\x00\x4a\xe2\xeb\x76\xf5\xfc\xd0\x38\x85\xf8\x17\x90\x84\x74\xc1\x34\x4a\x6a\xf6\xb3\x6a\x5f\x9c\xb9\x8e\xdc\x71\x8b\xfa\x64\x79\x3a\xce\x87\x5d\x0e\xf5\x28\x50\xf8\xdd\x79\xd6\x65\xef\x05\x97\x9c\x6f\x33\x2f\xa5\x29\x13\xd8\xbd\xf3\x2d\xa8\xfc\x43\x08\x06\xa4\xd3\xa2\xee\x71\xfc\x05\x96\xe4\xeb\x56\xf7\x87\x55\x87\x1b\x63\x22\x4a\x90\x6d\xc8\x73\xcc\x5c\xe6\xd7\x91\x1f\x76\x93\x87\x16\x21\x5d\x1d\xdb\x8a\x50\x63\x56\x50\xdb\x4d\x58\x3b\xa4\x85\xf3\x6d\x2e\x6c\xeb\xc8\x4b\x0b\xeb\xf7\xd5\xe5\xec\xad\xa0\x2a\xcb\xb2\x07\x27\xd0\x63\x28\xad\x32\xbd\x30\x71\xd0\x9c\x27\xd2\xb6\xb2\xf6\x0f\x5d\xb2\x97\xe7\xba\xe9\x5d\x9d\x98\xf8\x25\x7f\x1a\xd0\x30\xee\x94\x3c\xe7\xec\x1f\x40\xfe\xff\x46\xc8\x4d\x72\xf2\xcc\x6d\x7c\xeb\x60\x8e\x07\x35\x46\xbd\x77\xc3\xf6\x55\x6e\x43\xd4\xb6\x8e\x03\xb5\x33\x32\x68\x50\xbb\x2d\x23\xef\xbd\xd8\xab\x87\xeb\xf4\x8e\xfe\x76\xda\xcd\x1b\xd8\x71\x37\xc8\x51\xf0\x6a\x12\x3a\xf7\x13\x7b\x45\xbe\x0a\x0e\x60\xf3\x5b\xa3\xfd\xbd\x1f\xfd\x0d\x00\x00\xff\xff\xbf\x7a\x32\x7d\xae\x08\x00\x00")

func agentResourcesDetect_linuxShBytes() ([]byte, error) {
	return bindataRead(
		_agentResourcesDetect_linuxSh,
		"agent/resources/detect_linux.sh",
	)
}

func agentResourcesDetect_linuxSh() (*asset, error) {
	bytes, err := agentResourcesDetect_linuxShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "agent/resources/detect_linux.sh", size: 2222, mode: os.FileMode(420), modTime: time.Unix(1456337847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"agent/resources/detect_linux.sh": agentResourcesDetect_linuxSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"agent": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"detect_linux.sh": &bintree{agentResourcesDetect_linuxSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

