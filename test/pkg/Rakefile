# extremely flakey integration tests
# that atm just smokescreen that the
# packages install and do *something*

# but you can feel that there's something here,
# just lurking, waiting to be kind of formidable
#
# you will want a working docker before you run
# any of this, by the by.
require 'pry'

@integration_test_runs = 0
@integration_test_succ = 0
@integration_test_fail = 0

def usage
  puts "usage: integration:test distro=centos release=5 package=releases/appcanary_0.0.2-2015.11.10-212042-UTC_amd64_centos_5.rpm"
  exit 1
end

@verbose = (ENV["CANARY_ENV"] == "test")

require 'erb'
module Dockerfile
  TEMPLATE = <<-docker
FROM <%= container_name %>
RUN <%= update_cmd %>
COPY ./test.sh /root/test.sh
COPY latest.pkg /root/latest.pkg
  docker

  def self.render(dv)
    container_name = dv
    update_cmd = 'exit 1'

    if container_name =~ /centos/
      update_cmd = "yum clean all"
    else
      update_cmd = "apt-get update"
    end

    ERB.new(TEMPLATE).result(binding)
  end
end


module TestSh
  TEMPLATE = <<-test
#!/usr/bin/env bash
cd /root
<%= install_cmd %>
echo '#########'
echo Does the binary work?
appcanary -version && echo OKAC VERSION

echo '#########'
echo Did we get the files in?
cat /var/log/appcanary.log && echo OKAC LOG
cat /var/db/appcanary/server.conf && echo OKAC SERVERCONF
cat /etc/appcanary/agent.conf && echo OKAC CONFCONF
stat -c %U /var/log/appcanary.log | grep appcanary && echo OKAC LOGFILE

echo '#########'
echo What happens when we remove it?

<%= remove_cmd %> && cat /etc/appcanary/agent.conf 2>&1 && echo OKAC kept
  test

  def self.render(dv)
    install_cmd = "exit 1"
    if dv =~ /centos/
      install_cmd = "rpm --nosignature -i latest.pkg"
      # only 80% sure this does what we need
      # to test that upgrades don't clobber files
      remove_cmd = "echo foo > /etc/appcanary/agent.conf && rpm --nosignature -iv --replacepkgs latest.pkg && (if [ $(cat /etc/appcanary/agent.conf) = 'foo' ]; then exit 0; else exit 1; fi )"
    else
      install_cmd = "dpkg -i latest.pkg"
      remove_cmd = "apt-get -y remove appcanary"
    end

    ERB.new(TEMPLATE).result(binding)
  end
end

def shell(cmd)
  if @verbose
    puts "-> #{cmd}"
    system(cmd)
  else 
    `#{cmd}`
  end
end

namespace :integration do

  desc "test test"
  task :foo do
    puts File.dirname(__FILE__)
    @verbose = true
    puts `ls`
    if ENV["DOCKER_HOST"].nil?
      puts "Sorry partner, you need boot2docker running."
    end
  end

  task :init do

    @integration_test_path = File.dirname(__FILE__)

    if ENV["distro"] && ENV["release"] && ENV["package"]
      @distro = ENV["distro"]
      @release = ENV["release"]
      @package = ENV["package"]

      @docker_name = "#{@distro}:#{@release}"
      @distro_path = File.join(@integration_test_path, "#{@distro}/#{@release}")
      @ac_docker_name = "appcanary:#{@distro}_#{@release}"
    else
      usage
    end
  end

  task :clean => :init do
    `mkdir -p  #{@distro_path}`

    `rm -f #{@distro_path}/latest.pkg`
    `rm -f #{@distro_path}/Dockerfile`
    `rm -f #{@distro_path}/test.sh`
  end

  task :build => :clean do
    puts "# building #{@distro_version}..."
    
    if @package.empty?
      puts "Hey, we can't find a release. Did you build the packages?"
      exit
    end

    release_path = @package

    puts "# copying #{@package}"
    shell "cp #{release_path} #{@distro_path}/latest.pkg"

    puts "# generating test file"
    File.write(File.join(@distro_path, "test.sh"), TestSh.render(@docker_name))
    shell "chmod a+x #{File.join(@distro_path, "test.sh")}"

    puts "# generating dockerfile"
    File.write(File.join(@distro_path, "Dockerfile"), Dockerfile.render(@docker_name))

    puts "# building docker..."
    shell "cd #{@distro_path} && docker pull #{@docker_name}"
    shell "cd #{@distro_path} && docker build -t #{@ac_docker_name} ."
  end

  desc "test"
  task :test => [:init, :build] do
    puts "# running test.sh..."
    docker = "cd #{@distro_path} && docker run #{@ac_docker_name} /root/test.sh"
    cmd = "#{docker} &2>&1"
    output = `#{cmd}`

    if @verbose
      puts "-> #{cmd}"
      puts output
    end

    if output.scan("OKAC").count == 6
      puts "OK"
      @integration_test_succ += 1
      Rake::Task["integration:clean"].execute
    else
      @integration_test_fail += 1
      puts "FAIL"
    end

  end

  task :everything => :package do
    if ENV["DOCKER_HOST"].nil?
      puts "Sorry partner, you need boot2docker running."
    end

    puts "\n\n\n#################################"
    puts "Running docker integration tests."
    puts "#################################\n\n\n"
    @built_packages.each do |recipe|
      next if recipe.skip_docker
      recipe.releases.select { |name, file| file =~ /amd64/ }.each do |release, file|
        puts "invoking #{recipe.distro_name}/#{release}"
        ENV["distro"] = recipe.distro_name
        ENV["release"] = release
        ENV["package"] = file
        Rake::Task["integration:test"].invoke
        @integration_test_runs += 1
        Rake::Task.tasks.select { |t| t.name =~ /integration/ }.map(&:reenable)
      end
    end

    if @integration_test_fail != 0
      puts "\n\n\nFAIL: #{@integration_test_fail} tests failed."
      puts "#################################\n\n\n"
      exit 1
    elsif @integration_test_succ == @integration_test_runs
      puts "\n\n\nOK: All integration tests succeeded"
      puts "#########################################\n\n\n"
    end
  end
end



