# Parsing Expression Grammar for Gemfile.lock files

package main

type GemfileGrammar Peg {
     Gemfile
}

Gemfile <-  Git
            Gem  
            Platforms
            Dependencies 
            EndOfFile

Git <- 'GIT' LineEnd
        Remote
        Revision
        Specs
        LineEnd

Gem <- 'GEM' LineEnd
       Remote
       Specs 
       LineEnd


Platforms <- 'PLATFORMS' LineEnd
             Platform+
             LineEnd


Dependencies <- 'DEPENDENCIES' LineEnd
                Dependency+

Remote <- Indent2 'remote:' Spaces URL LineEnd
Revision <- Indent2 'revision:' Spaces SHA LineEnd

Specs <- Indent2 'specs:' LineEnd
         Dependency+

Dependency <- Indent2+ GemName { p.addGem(buffer[begin:end]) }
              Spaces Version?
              LineEnd 
GemName <- < ([[a-z]] / '-' / '_' / '!' / [0-9])+ >


Version <- < '(' Constraint (', ' Constraint)* ')' > { p.addVersion(buffer[begin:end]) }
Constraint <- VersionOp? Spaces [0-9]+ ('.' [0-9]+)*
VersionOp <- (Eq / Neq / Leq / Lt / Geq / Gt / TwiddleWakka)
Eq <- '='
Neq <- '!='
Leq <- '<='
Lt <- '<'
Geq <- '>='
Gt <- '>'
TwiddleWakka <- '~>' # Yes this is the official name of the operator

Platform <- NotNL+ LineEnd

URL <- NotSP+ # TODO: make this proper
SHA <- ([[a-z]] / [0-9])+ # TODO: this should be 20 bytes

NL <- '\r\n' / '\n' / '\r'
NotNL <- (!NL .)
NotSP <- (!(Space / NL) .)

LineEnd <- Spaces EndOfLine

Space <- ' ' / '\t'
Spaces <- Space*

EndOfLine	<- '\r\n' / '\n' / '\r'
EndOfFile	<- EndOfLine* !.
Indent2 <- '  '