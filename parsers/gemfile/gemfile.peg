# Parsing Expression Grammar for Gemfile.lock files

package gemfile

type GemfileParser Peg {
     Gemfile
     ParserState
}

Gemfile         <- (Git / Gem)+
                   Platforms
                   Dependencies 
                   EndOfFile

Git             <- 'GIT' LineEnd
                   Remote
                   Revision
                   Specs
                   LineEnd

Gem             <- 'GEM' LineEnd
                   Remote
                   Specs 
                   LineEnd

Platforms       <- 'PLATFORMS' LineEnd
                   Platform+
                   LineEnd


Dependencies    <- 'DEPENDENCIES' LineEnd
                    Dependency+

Remote          <- Indent2 'remote:' Spaces URL LineEnd
Revision        <- Indent2 'revision:' Spaces SHA LineEnd

Specs           <- Indent2 'specs:' LineEnd
                   Spec+

Spec            <- Indent4 {p.setState(ParsingSpec)}
                   GemVersion
                   SpecDep*

SpecDep         <- Indent6 {p.setState(ParsingSpecDep)}
                   GemVersion

Dependency      <- Indent2 { p.setState(ParsingDependency) } 
                   GemVersion

GemVersion      <- GemName 
                   Spaces Version?
                   LineEnd

GemName         <- < ([[a-z]] / '-' / '_' / '!' / [0-9])+ > { p.addGem(buffer[begin:end])}

Version         <- < '(' Constraint (', ' Constraint)* ')' > { p.addVersion(buffer[begin:end])}
Constraint      <- VersionOp? Spaces [0-9]+ ('.' [0-9]+)*
VersionOp       <- (Eq / Neq / Leq / Lt / Geq / Gt / TwiddleWakka)

Platform        <- Indent2 NotWhitespace+ LineEnd # TODO: Save platforms

URL             <- NotWhitespace+ # TODO: make this proper
SHA             <- ([[a-z]] / [0-9])+ # TODO: this should be 20 bytes

Eq              <- '='
Neq             <- '!='
Leq             <- '<='
Lt              <- '<'
Geq             <- '>='
Gt              <- '>'
TwiddleWakka    <- '~>' # Yes this is the official name of the operator

Space           <- ' ' / '\t'
Spaces          <- Space*
Indent2         <- Space Space
Indent4         <- Space Space Space Space
Indent6         <- Space Space Space Space Space Space

EndOfLine       <- '\r\n' / '\n' / '\r'
NotWhitespace   <- !(Space / EndOfLine) .
LineEnd         <- Spaces EndOfLine
EndOfFile       <- EndOfLine* !.